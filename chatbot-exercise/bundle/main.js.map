{"mappings":"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","sources":["<anon>","src/main.ts","src/health-assistant-thread.ts","src/entities.ts","src/health-assistant-client.ts"],"sourcesContent":["import {createInterface as $fkhaK$createInterface} from \"readline/promises\";\nimport {zodResponseFormat as $fkhaK$zodResponseFormat} from \"openai/helpers/zod\";\nimport {z as $fkhaK$z} from \"zod\";\nimport $fkhaK$openai from \"openai\";\n\n/** Entity for use data required for the flow */ var $bab01bfc96bd7f1a$export$f59d481d71dc7795;\n(function(ThreadActor) {\n    /** Context info for AI assistant */ ThreadActor[\"System\"] = \"system\";\n    /** The human patient */ ThreadActor[\"User\"] = \"user\";\n    /** AI assistant */ ThreadActor[\"Assistant\"] = \"assistant\";\n})($bab01bfc96bd7f1a$export$f59d481d71dc7795 || ($bab01bfc96bd7f1a$export$f59d481d71dc7795 = {}));\n\n\n\n\n\n\nclass $1b74035b95334955$export$eb017f9453374fe1 {\n    outStream;\n    /** The AI model to use */ model;\n    /** OpenAI client to interact with */ openAI;\n    /** Used to strongly typed parse user answer for getting their name and age */ PatientDataResponse = (0, $fkhaK$z).object({\n        assistant_response: (0, $fkhaK$z).string(),\n        is_patient_give_info: (0, $fkhaK$z).boolean(),\n        patient_name: (0, $fkhaK$z).string(),\n        patient_age: (0, $fkhaK$z).number()\n    });\n    constructor(outStream, apiKey, model = \"gpt-4o-mini\"){\n        this.outStream = outStream;\n        this.model = model;\n        this.openAI = new (0, $fkhaK$openai)({\n            apiKey: apiKey\n        });\n    }\n    /**\r\n   * Use structured outputs to understand if user responded with required\r\n   * name/age info. and to extract it.\r\n   * No proper error handling for now.\r\n   */ async getPatientData(messages) {\n        const params = {\n            model: this.model,\n            messages: this.convertMessagesToParams(messages),\n            response_format: (0, $fkhaK$zodResponseFormat)(this.PatientDataResponse, \"data\")\n        };\n        const completion = await this.openAI.beta.chat.completions.parse(params);\n        const response = completion.choices[0]?.message;\n        if (response?.parsed) {\n            let patientData;\n            if (response.parsed.is_patient_give_info) patientData = {\n                name: response.parsed.patient_name,\n                age: response.parsed.patient_age\n            };\n            return [\n                {\n                    actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).Assistant,\n                    content: response.parsed.assistant_response\n                },\n                patientData\n            ];\n        } else if (response?.content) return [\n            {\n                actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).Assistant,\n                content: response.content\n            },\n            undefined\n        ];\n        else return [\n            undefined,\n            undefined\n        ];\n    }\n    /**\r\n   * Simple question-answer loop using stream for the \"typing\" experience.\r\n   * No proper error handling for now.\r\n   */ async respondToQueryStream(messages) {\n        const params = {\n            model: this.model,\n            messages: this.convertMessagesToParams(messages)\n        };\n        const stream = await this.openAI.beta.chat.completions.stream(params);\n        // stream the output\n        for await (const chunk of stream)this.outStream.write(chunk.choices[0]?.delta?.content ?? \"\");\n        const content = await stream.finalContent();\n        return content ? {\n            actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).Assistant,\n            content: content\n        } : undefined;\n    }\n    convertMessagesToParams(messages) {\n        return messages.map((message)=>({\n                role: message.actor,\n                content: [\n                    {\n                        type: \"text\",\n                        text: message.content\n                    }\n                ]\n            }));\n    }\n}\n\n\n\nclass $249438781066c174$export$a095075ba026c8e5 {\n    /** OpenAI client to interact with */ client;\n    /** All previous messages in the thread */ messages = [];\n    /** Use name and age as collected from interaction */ patientData;\n    constructor(){\n        const apiKey = process.env[\"OPENAI_API_KEY\"];\n        if (!apiKey) throw new Error(`Please set OPENAI_API_KEY environment variable.\r\nexport OPENAI_API_KEY=\"your_api_key_here\"`);\n        this.client = new (0, $1b74035b95334955$export$eb017f9453374fe1)(process.stdout, apiKey);\n    }\n    async run() {\n        // Clear and init messages in the thread for conversation\n        this.init();\n        // step 1: get patient data\n        await this.getPatientAgeStep();\n        if (!this.patientData) return;\n        // step 2: question-answer loop\n        await this.questionAnswersStep();\n        // step 3: goodbye message\n        console.log(\"\\n\\nThis is all the questions I can answer at this time. Thank you.\\n\");\n    }\n    /**\r\n   * Ask the user for name and age.\r\n   * Allow 3 iterations to get the info from the user.\r\n   * If the user provides the info it is set on the thread state.\r\n   */ async getPatientAgeStep() {\n        const question = \"Hello, I'm here for you at this hard time. May I have your name and age to assist you better please?\";\n        console.log(`${question}\\n`);\n        this.messages.push({\n            actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).Assistant,\n            content: question\n        });\n        let attempts = 3;\n        while(!this.patientData && attempts-- > 0){\n            await this.getInputFromUser();\n            const [message, data] = await this.client.getPatientData(this.messages);\n            if (message) {\n                this.messages.push(message);\n                console.log(`\\n${message.content}\\n`);\n            }\n            if (data) this.setPatientData(data);\n        }\n    }\n    /**\r\n   * Get user question and provide an answer simple loop limited to 3.\r\n   * TODO: check user sentiment to break early on \"goodbye\" user input.\r\n   */ async questionAnswersStep() {\n        for(let i = 0; i < 3; i++){\n            await this.getInputFromUser();\n            const message = await this.client.respondToQueryStream(this.messages);\n            if (message) this.messages.push(message);\n        }\n    }\n    async getInputFromUser() {\n        const rl = $fkhaK$createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n        try {\n            let answer;\n            while(!answer)answer = (await rl.question(\"> \")).trim();\n            this.messages.push({\n                actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).User,\n                content: answer\n            });\n            console.log();\n        } finally{\n            rl.close();\n        }\n    }\n    setPatientData(data) {\n        this.patientData = data;\n        let content = `Patient is ${data.age} years old.`;\n        if (data.name) content += ` Patient's name is ${data.name}.`;\n        this.messages.push({\n            actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).System,\n            content: content\n        });\n    }\n    /**\r\n   * Clear the state of the thread and initialize with base system messages.\r\n   * System messages define the behavior and knowledge of the bot.\r\n   */ init() {\n        this.patientData = undefined;\n        this.messages = [\n            {\n                actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).System,\n                content: `You are a healthcare assistant. \r\n          You art providing information to a breast cancer patient.\r\n          You need to know the patient's name and age to assist them better.\r\n          You can work with only the age if the patient prefers to remain anonymous.\r\n          You absolutely must have the age and will not answer any questions without know it.`\n            },\n            {\n                actor: (0, $bab01bfc96bd7f1a$export$f59d481d71dc7795).System,\n                content: `You know the following on breast cancer and use only this information to respond to patient questions: \r\n        In 2022, there were 2.3 million women diagnosed with breast cancer and 670000 deaths globally. Breast cancer occurs \r\n        in every country of the world in women at any age after puberty but with increasing rates in later life. Global \r\n        estimates reveal striking inequities in the breast cancer burden according to human development. For instance, \r\n        in countries with a very high Human Development Index (HDI), 1 in 12 women will be diagnosed with breast cancer \r\n        in their lifetime and 1 in 71 women die of it. In contrast, in countries with a low HDI; while only 1 in 27 women \r\n        is diagnosed with breast cancer in their lifetime, 1 in 48 women will die from it.`\n            }\n        ];\n    }\n}\n\n\nasync function $3498824470b90348$var$main() {\n    const thread = new (0, $249438781066c174$export$a095075ba026c8e5)();\n    console.log(\"\\n---\\n\");\n    await thread.run();\n    console.log(\"\\n\\n---\\n\");\n}\nawait $3498824470b90348$var$main();\n\n\n//# sourceMappingURL=main.js.map\n","import { HealthAssistantThread } from './health-assistant-thread.js';\r\n\r\nasync function main(): Promise<void> {\r\n  const thread = new HealthAssistantThread();\r\n\r\n  console.log('\\n---\\n');\r\n\r\n  await thread.run();\r\n\r\n  console.log('\\n\\n---\\n');\r\n}\r\n\r\nawait main();\r\n","import { PatientData, ThreadActor, ThreadMessage } from './entities.js';\r\nimport { HealthAssistantClient } from './health-assistant-client.js';\r\nimport * as readline from 'readline/promises';\r\n\r\n/**\r\n * Encapsulate a single conversation with the user.\r\n * Holds all the messages to keep the context for the next user question.\r\n * Hold the knowledge base and behavioral system messages.\r\n * Has the simple logic (no state machine) of conversation flow.\r\n */\r\nexport class HealthAssistantThread {\r\n  /** OpenAI client to interact with */\r\n  private readonly client: HealthAssistantClient;\r\n\r\n  /** All previous messages in the thread */\r\n  private messages: ThreadMessage[] = [];\r\n\r\n  /** Use name and age as collected from interaction */\r\n  private patientData: PatientData | undefined;\r\n\r\n  constructor() {\r\n    const apiKey = process.env['OPENAI_API_KEY'];\r\n    if (!apiKey) {\r\n      throw new Error(\r\n        `Please set OPENAI_API_KEY environment variable.\r\nexport OPENAI_API_KEY=\"your_api_key_here\"`,\r\n      );\r\n    }\r\n\r\n    this.client = new HealthAssistantClient(process.stdout, apiKey);\r\n  }\r\n\r\n  public async run() {\r\n    // Clear and init messages in the thread for conversation\r\n    this.init();\r\n\r\n    // step 1: get patient data\r\n    await this.getPatientAgeStep();\r\n    if (!this.patientData) {\r\n      return;\r\n    }\r\n\r\n    // step 2: question-answer loop\r\n    await this.questionAnswersStep();\r\n\r\n    // step 3: goodbye message\r\n    console.log('\\n\\nThis is all the questions I can answer at this time. Thank you.\\n');\r\n  }\r\n\r\n  /**\r\n   * Ask the user for name and age.\r\n   * Allow 3 iterations to get the info from the user.\r\n   * If the user provides the info it is set on the thread state.\r\n   */\r\n  private async getPatientAgeStep(): Promise<void> {\r\n    const question =\r\n      \"Hello, I'm here for you at this hard time. May I have your name and age to assist you better please?\";\r\n    console.log(`${question}\\n`);\r\n    this.messages.push({ actor: ThreadActor.Assistant, content: question });\r\n\r\n    let attempts = 3;\r\n    while (!this.patientData && attempts-- > 0) {\r\n      await this.getInputFromUser();\r\n      const [message, data] = await this.client.getPatientData(this.messages);\r\n      if (message) {\r\n        this.messages.push(message);\r\n        console.log(`\\n${message.content}\\n`);\r\n      }\r\n      if (data) {\r\n        this.setPatientData(data);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user question and provide an answer simple loop limited to 3.\r\n   * TODO: check user sentiment to break early on \"goodbye\" user input.\r\n   */\r\n  private async questionAnswersStep(): Promise<void> {\r\n    for (let i = 0; i < 3; i++) {\r\n      await this.getInputFromUser();\r\n      const message = await this.client.respondToQueryStream(this.messages);\r\n      if (message) {\r\n        this.messages.push(message);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async getInputFromUser(): Promise<void> {\r\n    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\r\n    try {\r\n      let answer;\r\n      while (!answer) {\r\n        answer = (await rl.question('> ')).trim();\r\n      }\r\n      this.messages.push({ actor: ThreadActor.User, content: answer });\r\n      console.log();\r\n    } finally {\r\n      rl.close();\r\n    }\r\n  }\r\n\r\n  private setPatientData(data: PatientData) {\r\n    this.patientData = data;\r\n    let content = `Patient is ${data.age} years old.`;\r\n    if (data.name) {\r\n      content += ` Patient's name is ${data.name}.`;\r\n    }\r\n    this.messages.push({\r\n      actor: ThreadActor.System,\r\n      content: content,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the state of the thread and initialize with base system messages.\r\n   * System messages define the behavior and knowledge of the bot.\r\n   */\r\n  private init() {\r\n    this.patientData = undefined;\r\n    this.messages = [\r\n      {\r\n        actor: ThreadActor.System,\r\n        content: `You are a healthcare assistant. \r\n          You art providing information to a breast cancer patient.\r\n          You need to know the patient's name and age to assist them better.\r\n          You can work with only the age if the patient prefers to remain anonymous.\r\n          You absolutely must have the age and will not answer any questions without know it.`,\r\n      },\r\n      {\r\n        actor: ThreadActor.System,\r\n        content: `You know the following on breast cancer and use only this information to respond to patient questions: \r\n        In 2022, there were 2.3 million women diagnosed with breast cancer and 670000 deaths globally. Breast cancer occurs \r\n        in every country of the world in women at any age after puberty but with increasing rates in later life. Global \r\n        estimates reveal striking inequities in the breast cancer burden according to human development. For instance, \r\n        in countries with a very high Human Development Index (HDI), 1 in 12 women will be diagnosed with breast cancer \r\n        in their lifetime and 1 in 71 women die of it. In contrast, in countries with a low HDI; while only 1 in 27 women \r\n        is diagnosed with breast cancer in their lifetime, 1 in 48 women will die from it.`,\r\n      },\r\n    ];\r\n  }\r\n}\r\n","/** Entity for use data required for the flow */\r\nexport interface PatientData {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\n/** Single message in a thread */\r\nexport interface ThreadMessage {\r\n  actor: ThreadActor;\r\n  content: string;\r\n}\r\n\r\nexport enum ThreadActor {\r\n  /** Context info for AI assistant */\r\n  System = 'system',\r\n  /** The human patient */\r\n  User = 'user',\r\n  /** AI assistant */\r\n  Assistant = 'assistant',\r\n}\r\n","import { zodResponseFormat } from 'openai/helpers/zod';\r\nimport { never, unknown, z } from 'zod';\r\nimport OpenAI from 'openai';\r\nimport { ChatCompletionMessageParam } from 'openai/resources/index.mjs';\r\nimport { PatientData, ThreadActor, ThreadMessage } from './entities.js';\r\n\r\n/**\r\n * OpenAI client wrapper to encapsulate OpenAI APIs for Health Assistant.\r\n */\r\nexport class HealthAssistantClient {\r\n  private readonly outStream: NodeJS.WriteStream;\r\n\r\n  /** The AI model to use */\r\n  private readonly model: string;\r\n\r\n  /** OpenAI client to interact with */\r\n  private readonly openAI: OpenAI;\r\n\r\n  /** Used to strongly typed parse user answer for getting their name and age */\r\n  private PatientDataResponse = z.object({\r\n    assistant_response: z.string(),\r\n    is_patient_give_info: z.boolean(),\r\n    patient_name: z.string(),\r\n    patient_age: z.number(),\r\n  });\r\n\r\n  constructor(outStream: NodeJS.WriteStream, apiKey: string, model: string = 'gpt-4o-mini') {\r\n    this.outStream = outStream;\r\n    this.model = model;\r\n    this.openAI = new OpenAI({ apiKey: apiKey });\r\n  }\r\n\r\n  /**\r\n   * Use structured outputs to understand if user responded with required\r\n   * name/age info. and to extract it.\r\n   * No proper error handling for now.\r\n   */\r\n  public async getPatientData(\r\n    messages: ThreadMessage[],\r\n  ): Promise<[ThreadMessage | undefined, PatientData | undefined]> {\r\n    const params = {\r\n      model: this.model,\r\n      messages: this.convertMessagesToParams(messages),\r\n      response_format: zodResponseFormat(this.PatientDataResponse, 'data'),\r\n    };\r\n\r\n    const completion = await this.openAI.beta.chat.completions.parse(params);\r\n    const response = completion.choices[0]?.message;\r\n    if (response?.parsed) {\r\n      let patientData;\r\n      if (response.parsed.is_patient_give_info) {\r\n        patientData = { name: response.parsed.patient_name, age: response.parsed.patient_age };\r\n      }\r\n      return [\r\n        {\r\n          actor: ThreadActor.Assistant,\r\n          content: response.parsed.assistant_response,\r\n        },\r\n        patientData,\r\n      ];\r\n    } else if (response?.content) {\r\n      return [\r\n        {\r\n          actor: ThreadActor.Assistant,\r\n          content: response.content,\r\n        },\r\n        undefined,\r\n      ];\r\n    } else {\r\n      return [undefined, undefined];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simple question-answer loop using stream for the \"typing\" experience.\r\n   * No proper error handling for now.\r\n   */\r\n  public async respondToQueryStream(messages: ThreadMessage[]): Promise<ThreadMessage | undefined> {\r\n    const params = {\r\n      model: this.model,\r\n      messages: this.convertMessagesToParams(messages),\r\n    };\r\n\r\n    const stream = await this.openAI.beta.chat.completions.stream(params);\r\n\r\n    // stream the output\r\n    for await (const chunk of stream) {\r\n      this.outStream.write(chunk.choices[0]?.delta?.content ?? '');\r\n    }\r\n\r\n    const content = await stream.finalContent();\r\n\r\n    return content ? { actor: ThreadActor.Assistant, content } : undefined;\r\n  }\r\n\r\n  private convertMessagesToParams(messages: ThreadMessage[]): ChatCompletionMessageParam[] {\r\n    return messages.map((message) => ({\r\n      role: message.actor,\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: message.content,\r\n        },\r\n      ],\r\n    }));\r\n  }\r\n}\r\n"],"names":["$bab01bfc96bd7f1a$export$f59d481d71dc7795","ThreadActor","createInterface","$fkhaK$createInterface","zodResponseFormat","$fkhaK$zodResponseFormat","z","$fkhaK$z","$fkhaK$openai","$1b74035b95334955$export$eb017f9453374fe1","outStream","model","openAI","PatientDataResponse","object","assistant_response","string","is_patient_give_info","boolean","patient_name","patient_age","number","constructor","apiKey","getPatientData","messages","params","convertMessagesToParams","response_format","completion","beta","chat","completions","parse","response","choices","message","parsed","patientData","name","age","actor","Assistant","content","undefined","respondToQueryStream","stream","chunk","write","delta","finalContent","map","role","type","text","$249438781066c174$export$a095075ba026c8e5","client","process","env","Error","stdout","run","init","getPatientAgeStep","questionAnswersStep","console","log","question","push","attempts","getInputFromUser","data","setPatientData","i","rl","input","stdin","output","answer","trim","User","close","System","$3498824470b90348$var$main","thread"],"version":3,"file":"main.js.map","sourceRoot":"../"}